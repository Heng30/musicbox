// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'data.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

String watchUrl({required String id, dynamic hint}) =>
    RustLib.instance.api.watchUrl(id: id, hint: hint);

Future<List<String>> fetchIds(
        {required String keyword,
        required int maxIdCount,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.fetchIds(
        keyword: keyword,
        maxIdCount: maxIdCount,
        proxyUrl: proxyUrl,
        hint: hint);

Future<InfoData> videoInfo(
        {required String url, String? proxyUrl, dynamic hint}) =>
    RustLib.instance.api.videoInfo(url: url, proxyUrl: proxyUrl, hint: hint);

Future<InfoData> videoInfoById(
        {required String id, String? proxyUrl, dynamic hint}) =>
    RustLib.instance.api.videoInfoById(id: id, proxyUrl: proxyUrl, hint: hint);

Future<void> downloadVideo(
        {required String url,
        required String downloadPath,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.downloadVideo(
        url: url, downloadPath: downloadPath, proxyUrl: proxyUrl, hint: hint);

Future<void> downloadVideoById(
        {required String id,
        required String downloadPath,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.downloadVideoById(
        id: id, downloadPath: downloadPath, proxyUrl: proxyUrl, hint: hint);

Stream<ProgressData> downloadVideoByIdWithCallback(
        {required String id,
        required String downloadPath,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.downloadVideoByIdWithCallback(
        id: id, downloadPath: downloadPath, proxyUrl: proxyUrl, hint: hint);

Future<void> downloadAudio(
        {required String url,
        required String downloadPath,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.downloadAudio(
        url: url, downloadPath: downloadPath, proxyUrl: proxyUrl, hint: hint);

Future<void> downloadAudioById(
        {required String id,
        required String downloadPath,
        String? proxyUrl,
        dynamic hint}) =>
    RustLib.instance.api.downloadAudioById(
        id: id, downloadPath: downloadPath, proxyUrl: proxyUrl, hint: hint);
