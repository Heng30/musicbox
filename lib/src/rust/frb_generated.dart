// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/data.dart';
import 'api/db.dart';
import 'api/log.dart';
import 'api/msg_center.dart';
import 'api/util.dart';
import 'api/youtube.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.33';

  @override
  int get rustContentHash => 958966722;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_musicbox',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> closeDb({dynamic hint});

  Future<void> createDb({required String dbPath, dynamic hint});

  Future<void> createTable({required String sql, dynamic hint});

  Future<void> delete({required String sql, dynamic hint});

  Future<void> deleteAll({required String sql, dynamic hint});

  Future<void> deleteDb({required String dbPath, dynamic hint});

  Future<void> dropTable({required String sql, dynamic hint});

  Future<void> insert({required String sql, dynamic hint});

  Future<int> rowCount({required String sql, dynamic hint});

  Future<List<Map<String, String>>> select({required String sql, dynamic hint});

  Future<List<Map<String, String>>> selectAll(
      {required String sql, dynamic hint});

  Future<void> update({required String sql, dynamic hint});

  Future<void> init({dynamic hint});

  Future<void> initLogger({dynamic hint});

  Stream<MsgItem> msgCenterInit({dynamic hint});

  Future<void> send({required MsgItem item, dynamic hint});

  Future<void> createDirAll({required String dir, dynamic hint});

  Future<void> downloadAudio(
      {required String url,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint});

  Future<void> downloadAudioById(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint});

  Future<void> downloadVideo(
      {required String url,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint});

  Future<void> downloadVideoById(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint});

  Stream<ProgressData> downloadVideoByIdWithCallback(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint});

  Future<List<String>> fetchIds(
      {required String keyword,
      required int maxIdCount,
      String? proxyUrl,
      dynamic hint});

  Future<InfoData> videoInfo(
      {required String url, String? proxyUrl, dynamic hint});

  Future<InfoData> videoInfoById(
      {required String id, String? proxyUrl, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> closeDb({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseDbConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseDbConstMeta => const TaskConstMeta(
        debugName: "close_db",
        argNames: [],
      );

  @override
  Future<void> createDb({required String dbPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCreateDbConstMeta,
      argValues: [dbPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateDbConstMeta => const TaskConstMeta(
        debugName: "create_db",
        argNames: ["dbPath"],
      );

  @override
  Future<void> createTable({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCreateTableConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateTableConstMeta => const TaskConstMeta(
        debugName: "create_table",
        argNames: ["sql"],
      );

  @override
  Future<void> delete({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteConstMeta => const TaskConstMeta(
        debugName: "delete",
        argNames: ["sql"],
      );

  @override
  Future<void> deleteAll({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteAllConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteAllConstMeta => const TaskConstMeta(
        debugName: "delete_all",
        argNames: ["sql"],
      );

  @override
  Future<void> deleteDb({required String dbPath, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteDbConstMeta,
      argValues: [dbPath],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteDbConstMeta => const TaskConstMeta(
        debugName: "delete_db",
        argNames: ["dbPath"],
      );

  @override
  Future<void> dropTable({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDropTableConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropTableConstMeta => const TaskConstMeta(
        debugName: "drop_table",
        argNames: ["sql"],
      );

  @override
  Future<void> insert({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kInsertConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInsertConstMeta => const TaskConstMeta(
        debugName: "insert",
        argNames: ["sql"],
      );

  @override
  Future<int> rowCount({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kRowCountConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRowCountConstMeta => const TaskConstMeta(
        debugName: "row_count",
        argNames: ["sql"],
      );

  @override
  Future<List<Map<String, String>>> select(
      {required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Map_String_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSelectConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSelectConstMeta => const TaskConstMeta(
        debugName: "select",
        argNames: ["sql"],
      );

  @override
  Future<List<Map<String, String>>> selectAll(
      {required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Map_String_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSelectAllConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSelectAllConstMeta => const TaskConstMeta(
        debugName: "select_all",
        argNames: ["sql"],
      );

  @override
  Future<void> update({required String sql, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUpdateConstMeta,
      argValues: [sql],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateConstMeta => const TaskConstMeta(
        debugName: "update",
        argNames: ["sql"],
      );

  @override
  Future<void> init({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitConstMeta => const TaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  @override
  Future<void> initLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  Stream<MsgItem> msgCenterInit({dynamic hint}) {
    final sink = RustStreamSink<MsgItem>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_msg_item_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kMsgCenterInitConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kMsgCenterInitConstMeta => const TaskConstMeta(
        debugName: "msg_center_init",
        argNames: ["sink"],
      );

  @override
  Future<void> send({required MsgItem item, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_msg_item(item, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSendConstMeta,
      argValues: [item],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSendConstMeta => const TaskConstMeta(
        debugName: "send",
        argNames: ["item"],
      );

  @override
  Future<void> createDirAll({required String dir, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCreateDirAllConstMeta,
      argValues: [dir],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateDirAllConstMeta => const TaskConstMeta(
        debugName: "create_dir_all",
        argNames: ["dir"],
      );

  @override
  Future<void> downloadAudio(
      {required String url,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_String(downloadPath, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDownloadAudioConstMeta,
      argValues: [url, downloadPath, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDownloadAudioConstMeta => const TaskConstMeta(
        debugName: "download_audio",
        argNames: ["url", "downloadPath", "proxyUrl"],
      );

  @override
  Future<void> downloadAudioById(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(downloadPath, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDownloadAudioByIdConstMeta,
      argValues: [id, downloadPath, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDownloadAudioByIdConstMeta => const TaskConstMeta(
        debugName: "download_audio_by_id",
        argNames: ["id", "downloadPath", "proxyUrl"],
      );

  @override
  Future<void> downloadVideo(
      {required String url,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_String(downloadPath, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDownloadVideoConstMeta,
      argValues: [url, downloadPath, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDownloadVideoConstMeta => const TaskConstMeta(
        debugName: "download_video",
        argNames: ["url", "downloadPath", "proxyUrl"],
      );

  @override
  Future<void> downloadVideoById(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_String(downloadPath, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDownloadVideoByIdConstMeta,
      argValues: [id, downloadPath, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDownloadVideoByIdConstMeta => const TaskConstMeta(
        debugName: "download_video_by_id",
        argNames: ["id", "downloadPath", "proxyUrl"],
      );

  @override
  Stream<ProgressData> downloadVideoByIdWithCallback(
      {required String id,
      required String downloadPath,
      String? proxyUrl,
      dynamic hint}) {
    final sink = RustStreamSink<ProgressData>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_progress_data_Sse(sink, serializer);
        sse_encode_String(id, serializer);
        sse_encode_String(downloadPath, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDownloadVideoByIdWithCallbackConstMeta,
      argValues: [sink, id, downloadPath, proxyUrl],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kDownloadVideoByIdWithCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "download_video_by_id_with_callback",
        argNames: ["sink", "id", "downloadPath", "proxyUrl"],
      );

  @override
  Future<List<String>> fetchIds(
      {required String keyword,
      required int maxIdCount,
      String? proxyUrl,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(keyword, serializer);
        sse_encode_usize(maxIdCount, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFetchIdsConstMeta,
      argValues: [keyword, maxIdCount, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFetchIdsConstMeta => const TaskConstMeta(
        debugName: "fetch_ids",
        argNames: ["keyword", "maxIdCount", "proxyUrl"],
      );

  @override
  Future<InfoData> videoInfo(
      {required String url, String? proxyUrl, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_info_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kVideoInfoConstMeta,
      argValues: [url, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kVideoInfoConstMeta => const TaskConstMeta(
        debugName: "video_info",
        argNames: ["url", "proxyUrl"],
      );

  @override
  Future<InfoData> videoInfoById(
      {required String id, String? proxyUrl, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(id, serializer);
        sse_encode_opt_String(proxyUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_info_data,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kVideoInfoByIdConstMeta,
      argValues: [id, proxyUrl],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kVideoInfoByIdConstMeta => const TaskConstMeta(
        debugName: "video_info_by_id",
        argNames: ["id", "proxyUrl"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<MsgItem> dco_decode_StreamSink_msg_item_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ProgressData> dco_decode_StreamSink_progress_data_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  MsgItem dco_decode_box_autoadd_msg_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_msg_item(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  InfoData dco_decode_info_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return InfoData(
      title: dco_decode_String(arr[0]),
      author: dco_decode_String(arr[1]),
      videoId: dco_decode_String(arr[2]),
      shortDescription: dco_decode_String(arr[3]),
      viewCount: dco_decode_u_64(arr[4]),
      lengthSeconds: dco_decode_u_64(arr[5]),
    );
  }

  @protected
  List<Map<String, String>> dco_decode_list_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Map_String_String).toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  MsgItem dco_decode_msg_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MsgItem(
      ty: dco_decode_msg_type(arr[0]),
      data: dco_decode_String(arr[1]),
    );
  }

  @protected
  MsgType dco_decode_msg_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MsgType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  ProgressData dco_decode_progress_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProgressData(
      currentSize: dco_decode_u_64(arr[0]),
      totalSize: dco_decode_opt_box_autoadd_u_64(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<MsgItem> sse_decode_StreamSink_msg_item_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ProgressData> sse_decode_StreamSink_progress_data_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  MsgItem sse_decode_box_autoadd_msg_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_msg_item(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  InfoData sse_decode_info_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_videoId = sse_decode_String(deserializer);
    var var_shortDescription = sse_decode_String(deserializer);
    var var_viewCount = sse_decode_u_64(deserializer);
    var var_lengthSeconds = sse_decode_u_64(deserializer);
    return InfoData(
        title: var_title,
        author: var_author,
        videoId: var_videoId,
        shortDescription: var_shortDescription,
        viewCount: var_viewCount,
        lengthSeconds: var_lengthSeconds);
  }

  @protected
  List<Map<String, String>> sse_decode_list_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Map<String, String>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Map_String_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  MsgItem sse_decode_msg_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ty = sse_decode_msg_type(deserializer);
    var var_data = sse_decode_String(deserializer);
    return MsgItem(ty: var_ty, data: var_data);
  }

  @protected
  MsgType sse_decode_msg_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MsgType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProgressData sse_decode_progress_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_currentSize = sse_decode_u_64(deserializer);
    var var_totalSize = sse_decode_opt_box_autoadd_u_64(deserializer);
    return ProgressData(currentSize: var_currentSize, totalSize: var_totalSize);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_msg_item_Sse(
      RustStreamSink<MsgItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_msg_item, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_progress_data_Sse(
      RustStreamSink<ProgressData> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_progress_data,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_msg_item(MsgItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_msg_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_info_data(InfoData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.videoId, serializer);
    sse_encode_String(self.shortDescription, serializer);
    sse_encode_u_64(self.viewCount, serializer);
    sse_encode_u_64(self.lengthSeconds, serializer);
  }

  @protected
  void sse_encode_list_Map_String_String(
      List<Map<String, String>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Map_String_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_msg_item(MsgItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_msg_type(self.ty, serializer);
    sse_encode_String(self.data, serializer);
  }

  @protected
  void sse_encode_msg_type(MsgType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_progress_data(ProgressData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.currentSize, serializer);
    sse_encode_opt_box_autoadd_u_64(self.totalSize, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
